  // LCD Registers
  sbit LCD_RS at RD2_bit;
  sbit LCD_EN at RD3_bit;
  sbit LCD_D4 at RD4_bit;
  sbit LCD_D5 at RD5_bit;
  sbit LCD_D6 at RD6_bit;
  sbit LCD_D7 at RD7_bit;

  sbit LCD_RS_Direction at TRISD2_bit;
  sbit LCD_EN_Direction at TRISD3_bit;
  sbit LCD_D4_Direction at TRISD4_bit;
  sbit LCD_D5_Direction at TRISD5_bit;
  sbit LCD_D6_Direction at TRISD6_bit;
  sbit LCD_D7_Direction at TRISD7_bit;
  // End LCD Registers

  //LM35 Variables
  char Temperature[7];
  char test[7];
  unsigned int Temp;

  //Button Variables & Functions
  unsigned char old_PORTB = 0;
  int desiredTemp = 24;
  char desiredTempText[7];
  
  int fanSpeed = 25; //0, 25, 50, 75, 100
  int state = 1;
  int clear = 0;
  
  void TEMP_measure();
  void TEMP_desired();

  void main() {

       TRISB = 0xFF;
       TRISD = 0x00;
       
       //Buttons
       
        INTCON.f7 = 1;         // enable global interrupts
        INTCON.f6 = 1;         // enable peripheral interrupts
        INTCON.f3 = 1;         // enables the RB port change interrupt

        OPTION_REG.f5 = 0;     // set timer0 clk src to internal cycle clk
        OPTION_REG.f3 = 0;     // set prescaler to timer0 module
        OPTION_REG.f2 = 1;     // set prescaler to 1:256 (bits 2 to 0)
        OPTION_REG.f1 = 1;
        OPTION_REG.f0 = 1;

       old_PORTB = PORTB;     // for RB port change

       //LCD
       Lcd_Init();
       Lcd_Cmd(_LCD_TURN_ON);       //Turn on LCD
       Lcd_Cmd(_LCD_CLEAR);         // Clear display
       Lcd_Cmd(_LCD_CURSOR_OFF);    // Cursor off
       
       while(1){
           if (clear == 1){
               Lcd_cmd(_LCD_CLEAR);
               clear = 0;
           }

           if (state == 1){ //Set Desired Temperature
              TEMP_desired();
           }
           
           else if (state == 2){  //Automatic Temperature
               TEMP_measure();
           }
           else if (state == 3){
              Lcd_out(1,1, "Manual");
           }
       }
  }
  
  void TEMP_desired(){
    Lcd_out(1, 1, "Set Desired");
    Lcd_out(2,1, "Temperature:");
    
    IntToStr(desiredTemp, desiredTempText);
    LTrim(desiredTempText);

    Lcd_out(2,14, desiredTempText);
    Lcd_out(2,16, "C");
  }
  
  void TEMP_measure(){
         // Configure RA0/AN0 as analog pin
       ADCON1 |= 0x0E;
       // Enable the A/D converter
       ADCON0 |= 0x01;
       
        Temp = ADC_Read(0) * 0.489;           // Read analog voltage and convert it to degree Celsius (0.489 = 500/1023)
        IntToStr(Temp, test);
        LTrim(test);
        
        Lcd_out(1,1,"Room Temp.: ");
        Lcd_out(1,14,test);
        Lcd_out(1,16,"C");
  }

  void ISR()iv 0x0004 ics ICS_AUTO{
       INTCON.f7 = 0;         // disable global interrupts
       INTCON.f6 = 0;         // disable peripheral interrupts

       if (INTCON.f0 == 1){
            unsigned char key_pressed;
            unsigned char new_PORTB = PORTB;
            key_pressed =  old_PORTB ^ new_PORTB;

            if(key_pressed & 0x10){ //RB4 Mode Button
                state++;
                key_pressed = 0;
                if(state == 4){
                    state = 1;
                }
                clear = 1;
            }
            else if (key_pressed & 0x20){ //RB5 Increment Buttom
                 key_pressed = 0;
                 switch(state){
                     case 1:
                          if (desiredTemp < 30)
                              desiredTemp++;
                          break;
                     case 2: break;
                     case 3:
                          if (fanSpeed < 5)
                              fanSpeed++;
                          break;
                     default: break;
                 }
             }
             else if (key_pressed & 0x40){ //RB6 Decrement Buttom
                 key_pressed = 0;
                 switch(state){
                     case 1:
                          if (desiredTemp > 18)
                              desiredTemp--;
